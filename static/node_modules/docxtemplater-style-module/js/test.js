"use strict";

var expect = require("chai").expect;

var path = require("path");

var _require = require("docxtemplater/js/tests/utils"),
    shouldBeSame = _require.shouldBeSame,
    setExamplesDirectory = _require.setExamplesDirectory,
    createDoc = _require.createDoc,
    createDocV4 = _require.createDocV4,
    setStartFunction = _require.setStartFunction,
    start = _require.start;

var StyleModule = require("./index.js");

var styleTransformer = require("./style-transformer");

var SlidesModule;

try {
  SlidesModule = require("../../slides/es6/index");
} catch (e) {
  /* eslint-disable no-console */
  console.log(JSON.stringify({
    msg: "slides module tests skipped"
  }));
  /* eslint-enable no-console */
}

var options, data, expectedName, name, v4, withSlidesModule, async;

function testStart() {
  beforeEach(function () {
    async = false;
    v4 = false;
    withSlidesModule = false;
    options = {};
    this.expectedText = null;

    this.loadAndRender = function () {
      var _this = this;

      var styleModule = new StyleModule(options);
      var modules = [styleModule];

      if (withSlidesModule) {
        modules.push(new SlidesModule());
      }

      if (v4) {
        this.doc = createDocV4(name, {
          modules: modules
        });
      } else {
        this.doc = createDoc(name);
        modules.forEach(function (module) {
          _this.doc.attachModule(module);
        });
      }

      if (async) {
        this.doc.setData({});
        this.doc.compile();
        return this.doc.resolveData(data).then(function () {
          // this.doc.setData(data);
          _this.renderedDoc = _this.doc.render();
          var doc = _this.renderedDoc;
          shouldBeSame({
            doc: doc,
            expectedName: expectedName
          });
        });
      }

      this.doc.setData(data);
      this.renderedDoc = this.doc.render();

      if (this.expectedText !== null) {
        expect(this.doc.getFullText()).to.equal(this.expectedText);
      }

      shouldBeSame({
        doc: this.renderedDoc,
        expectedName: expectedName
      });
    };
  });
  describe("Style row", function () {
    it("should work", function () {
      name = "style-row.docx";
      expectedName = "expected-style-row.docx";
      data = {
        name: "John",
        first: {
          cellBackground: "#00ff00",
          textColor: "#ffffff"
        }
      };
      this.loadAndRender();
    });
    it("should work with pptx", function () {
      name = "style-row.pptx";
      expectedName = "expected-style-row.pptx";
      data = {
        name: "John",
        first: {
          cellBackground: "#00ff00",
          textColor: "#ffffff"
        }
      };
      this.loadAndRender();
    }); // it("should work with pptx async", function () {
    // 	async = true;
    // 	name = "style-row.pptx";
    // 	expectedName = "expected-style-row.pptx";
    // 	data = {
    // 		name: "John",
    // 		first: {
    // 			cellBackground: "#00ff00",
    // 			textColor: "#ffffff",
    // 		},
    // 	};
    // 	return this.loadAndRender();
    // });
  });
  describe("Style cell", function () {
    it("should work", function () {
      name = "style-example.docx";
      expectedName = "expected-style-example.docx";
      data = {
        nb: 10,
        label: "Hello",
        style: {
          cellBackground: "#00ff00",
          textColor: "#ffffff"
        }
      };
      this.loadAndRender();
    });
    it("should work with pptx", function () {
      name = "stylecell.pptx";
      expectedName = "expected-stylecell.pptx";
      data = {
        nb: 10,
        label: "Hello",
        style: {
          cellBackground: "#00ff00",
          fontFamily: "Bahnschrift",
          textColor: "#0000ff"
        }
      };
      this.loadAndRender();
    });
    it("should work with v4", function () {
      v4 = true;
      name = "style-example.docx";
      expectedName = "expected-style-example.docx";
      data = {
        nb: 10,
        label: "Hello",
        style: {
          cellBackground: "#00ff00",
          textColor: "#ffffff"
        }
      };
      this.loadAndRender();
    });
    it("should work without having any tags", function () {
      name = "style-without-tags.docx";
      expectedName = "expected-style-without-tags.docx";
      data = {
        nb: 10,
        label: "Hello",
        style: {
          cellBackground: "#00ff00",
          textColor: "#ffffff"
        }
      };
      this.loadAndRender();
    });
  });
  describe("Paragraph", function () {
    it("should work with paragraph style", function () {
      name = "style-par-example.docx";
      expectedName = "expected-par-changed.docx";
      data = {
        font: {
          fontFamily: "Bahnschrift",
          textColor: "#554499"
        },
        font2: {
          fontFamily: "Calibri",
          textColor: "#449955"
        }
      };
      this.loadAndRender();
    });
    it("should be possible to change pStyle", function () {
      name = "style-par-example.docx";
      expectedName = "expected-par-pstyle.docx";
      data = {
        font: {
          pStyle: "Heading"
        },
        font2: {
          pStyle: "Caption"
        }
      };
      this.loadAndRender();
    });
  });
  describe("style transformer", function () {
    it("should work for textColor", function () {
      var styleData = {
        textColor: "#554499"
      };
      var xml = "<w:p>\n<w:pPr>\n<w:rPr/>\n</w:pPr>\n<w:r>\n<w:rPr/>\n<w:t></w:t>\n</w:r>\n</w:p>";
      var result = styleTransformer(xml, styleData, "docx", false);
      expect(result).to.equal("<w:p>\n<w:pPr>\n<w:rPr><w:color w:val=\"554499\"/></w:rPr>\n</w:pPr>\n<w:r>\n<w:rPr><w:color w:val=\"554499\"/></w:rPr>\n<w:t></w:t>\n</w:r>\n</w:p>");
    });
    it("should work for font + color", function () {
      var styleData = {
        textColor: "#554499",
        fontFamily: "Bahnschrift"
      };
      var xml = "<w:p>\n<w:pPr>\n<w:rPr/>\n</w:pPr>\n<w:r>\n<w:rPr/>\n<w:t></w:t>\n</w:r>\n</w:p>";
      var result = styleTransformer(xml, styleData, "docx", false);
      expect(result).to.equal("<w:p>\n<w:pPr>\n<w:rPr><w:color w:val=\"554499\"/><w:rFonts w:ascii=\"Bahnschrift\" w:hAnsi=\"Bahnschrift\"/></w:rPr>\n</w:pPr>\n<w:r>\n<w:rPr><w:color w:val=\"554499\"/><w:rFonts w:ascii=\"Bahnschrift\" w:hAnsi=\"Bahnschrift\"/></w:rPr>\n<w:t></w:t>\n</w:r>\n</w:p>");
    });
    it("should work for table rows", function () {
      var styleData = {
        cellBackground: "#00ff00",
        textColor: "#ffffff"
      };
      var xml = "\n<a:tr h=\"365760\">\n    <a:tc>\n        <a:txBody>\n            <a:bodyPr/>\n            <a:p>\n                <a:pPr>\n                    <a:buNone/>\n                </a:pPr>\n                <a:r>\n                    <a:rPr lang=\"\" altLang=\"en-US\"/>\n                    <a:t>Hello John</a:t>\n                </a:r>\n                <a:endParaRPr lang=\"\" altLang=\"en-US\"/>\n            </a:p>\n        </a:txBody>\n        <a:tcPr/>\n    </a:tc>\n    <a:tc>\n        <a:txBody>\n            <a:bodyPr/>\n            <a:p>\n                <a:pPr>\n                    <a:buNone/>\n                </a:pPr>\n                <a:r>\n                    <a:rPr lang=\"\" altLang=\"en-US\"/>\n                    <a:t>Bye</a:t>\n                </a:r>\n                <a:endParaRPr lang=\"\" altLang=\"en-US\"/>\n            </a:p>\n        </a:txBody>\n        <a:tcPr/>\n    </a:tc>\n</a:tr>\n\t\t\t";
      var result = styleTransformer(xml, styleData, "pptx", false);
      expect(result).to.equal("\n<a:tr h=\"365760\">\n    <a:tc>\n        <a:txBody>\n            <a:bodyPr/>\n            <a:p>\n                <a:pPr>\n                    <a:buNone/>\n                </a:pPr>\n                <a:r>\n                    <a:rPr lang=\"\" altLang=\"en-US\"><a:solidFill><a:srgbClr val=\"FFFFFF\"/></a:solidFill></a:rPr>\n                    <a:t>Hello John</a:t>\n                </a:r>\n                <a:endParaRPr lang=\"\" altLang=\"en-US\"/>\n            </a:p>\n        </a:txBody>\n        <a:tcPr><a:solidFill><a:srgbClr val=\"00FF00\"/></a:solidFill></a:tcPr>\n    </a:tc>\n    <a:tc>\n        <a:txBody>\n            <a:bodyPr/>\n            <a:p>\n                <a:pPr>\n                    <a:buNone/>\n                </a:pPr>\n                <a:r>\n                    <a:rPr lang=\"\" altLang=\"en-US\"><a:solidFill><a:srgbClr val=\"FFFFFF\"/></a:solidFill></a:rPr>\n                    <a:t>Bye</a:t>\n                </a:r>\n                <a:endParaRPr lang=\"\" altLang=\"en-US\"/>\n            </a:p>\n        </a:txBody>\n        <a:tcPr><a:solidFill><a:srgbClr val=\"00FF00\"/></a:solidFill></a:tcPr>\n    </a:tc>\n</a:tr>\n\t\t\t");
    });
  });
}

setExamplesDirectory(path.resolve(__dirname, "..", "examples"));
setStartFunction(testStart);
start();