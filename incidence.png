<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
  "http://www.w3.org/TR/html4/loose.dtd">
<html>
  <head>
    <title>AttributeError: 'Response' object has no attribute 'write' // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css"
        type="text/css">
    <!-- We need to make sure this has a favicon so that the debugger does
         not by accident trigger a request to /favicon.ico which might
         change the application state. -->
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=jquery.js"></script>
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script type="text/javascript">
      var TRACEBACK = 4636297008,
          CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "QtTwnVxNIstTYdlXJbNq";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>AttributeError</h1>
<div class="detail">
  <p class="errormsg">AttributeError: 'Response' object has no attribute 'write'</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  
  <ul><li><div class="frame" id="frame-4636297680">
  <h4>File <cite class="filename">"/Users/apreston/PycharmProjects/guinea-malaria-maps/venv/lib/python3.8/site-packages/flask/app.py"</cite>,
      line <em class="line">2464</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def __call__(self, environ, start_response):</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app` which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to applying middleware.&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def __repr__(self):</pre>
<pre class="line after"><span class="ws">        </span>return &quot;&lt;%s %r&gt;&quot; % (self.__class__.__name__, self.name)</pre></div>
</div>

<li><div class="frame" id="frame-4636296384">
  <h4>File <cite class="filename">"/Users/apreston/PycharmProjects/guinea-malaria-maps/venv/lib/python3.8/site-packages/flask/app.py"</cite>,
      line <em class="line">2450</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-4636296720">
  <h4>File <cite class="filename">"/Users/apreston/PycharmProjects/guinea-malaria-maps/venv/lib/python3.8/site-packages/flask_cors/extension.py"</cite>,
      line <em class="line">165</em>,
      in <code class="function">wrapped_function</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span># Wrap exception handlers with cross_origin</pre>
<pre class="line before"><span class="ws">        </span># These error handlers will still respect the behavior of the route</pre>
<pre class="line before"><span class="ws">        </span>if options.get('intercept_exceptions', True):</pre>
<pre class="line before"><span class="ws">            </span>def _after_request_decorator(f):</pre>
<pre class="line before"><span class="ws">                </span>def wrapped_function(*args, **kwargs):</pre>
<pre class="line current"><span class="ws">                    </span>return cors_after_request(app.make_response(f(*args, **kwargs)))</pre>
<pre class="line after"><span class="ws">                </span>return wrapped_function</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if hasattr(app, 'handle_exception'):</pre>
<pre class="line after"><span class="ws">                </span>app.handle_exception = _after_request_decorator(</pre>
<pre class="line after"><span class="ws">                    </span>app.handle_exception)</pre></div>
</div>

<li><div class="frame" id="frame-4636296432">
  <h4>File <cite class="filename">"/Users/apreston/PycharmProjects/guinea-malaria-maps/venv/lib/python3.8/site-packages/flask/app.py"</cite>,
      line <em class="line">1867</em>,
      in <code class="function">handle_exception</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span># if we want to repropagate the exception, we can attempt to</pre>
<pre class="line before"><span class="ws">            </span># raise it with the whole traceback in case we can do that</pre>
<pre class="line before"><span class="ws">            </span># (the function was actually called from the except part)</pre>
<pre class="line before"><span class="ws">            </span># otherwise, we just raise the error again</pre>
<pre class="line before"><span class="ws">            </span>if exc_value is e:</pre>
<pre class="line current"><span class="ws">                </span>reraise(exc_type, exc_value, tb)</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>raise e</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>self.log_exception((exc_type, exc_value, tb))</pre>
<pre class="line after"><span class="ws">        </span>server_error = InternalServerError()</pre></div>
</div>

<li><div class="frame" id="frame-4636296480">
  <h4>File <cite class="filename">"/Users/apreston/PycharmProjects/guinea-malaria-maps/venv/lib/python3.8/site-packages/flask/_compat.py"</cite>,
      line <em class="line">39</em>,
      in <code class="function">reraise</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>import collections.abc as collections_abc</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def reraise(tp, value, tb=None):</pre>
<pre class="line before"><span class="ws">        </span>if value.__traceback__ is not tb:</pre>
<pre class="line before"><span class="ws">            </span>raise value.with_traceback(tb)</pre>
<pre class="line current"><span class="ws">        </span>raise value</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>implements_to_string = _identity</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span>else:</pre>
<pre class="line after"><span class="ws">    </span>iterkeys = lambda d: d.iterkeys()</pre></div>
</div>

<li><div class="frame" id="frame-4638597072">
  <h4>File <cite class="filename">"/Users/apreston/PycharmProjects/guinea-malaria-maps/venv/lib/python3.8/site-packages/flask/app.py"</cite>,
      line <em class="line">2447</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-4638596832">
  <h4>File <cite class="filename">"/Users/apreston/PycharmProjects/guinea-malaria-maps/venv/lib/python3.8/site-packages/flask/app.py"</cite>,
      line <em class="line">1952</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(self, rv, from_error_handler=False):</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Given the return value from a view function this finalizes</pre>
<pre class="line after"><span class="ws">        </span>the request by converting it into a response and invoking the</pre></div>
</div>

<li><div class="frame" id="frame-4636295280">
  <h4>File <cite class="filename">"/Users/apreston/PycharmProjects/guinea-malaria-maps/venv/lib/python3.8/site-packages/flask_cors/extension.py"</cite>,
      line <em class="line">165</em>,
      in <code class="function">wrapped_function</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span># Wrap exception handlers with cross_origin</pre>
<pre class="line before"><span class="ws">        </span># These error handlers will still respect the behavior of the route</pre>
<pre class="line before"><span class="ws">        </span>if options.get('intercept_exceptions', True):</pre>
<pre class="line before"><span class="ws">            </span>def _after_request_decorator(f):</pre>
<pre class="line before"><span class="ws">                </span>def wrapped_function(*args, **kwargs):</pre>
<pre class="line current"><span class="ws">                    </span>return cors_after_request(app.make_response(f(*args, **kwargs)))</pre>
<pre class="line after"><span class="ws">                </span>return wrapped_function</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if hasattr(app, 'handle_exception'):</pre>
<pre class="line after"><span class="ws">                </span>app.handle_exception = _after_request_decorator(</pre>
<pre class="line after"><span class="ws">                    </span>app.handle_exception)</pre></div>
</div>

<li><div class="frame" id="frame-4638597024">
  <h4>File <cite class="filename">"/Users/apreston/PycharmProjects/guinea-malaria-maps/venv/lib/python3.8/site-packages/flask/app.py"</cite>,
      line <em class="line">1821</em>,
      in <code class="function">handle_user_exception</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>return self.handle_http_exception(e)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>handler = self._find_error_handler(e)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if handler is None:</pre>
<pre class="line current"><span class="ws">            </span>reraise(exc_type, exc_value, tb)</pre>
<pre class="line after"><span class="ws">        </span>return handler(e)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def handle_exception(self, e):</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Handle an exception that did not have an error handler</pre>
<pre class="line after"><span class="ws">        </span>associated with it, or that was raised from an error handler.</pre></div>
</div>

<li><div class="frame" id="frame-4636295664">
  <h4>File <cite class="filename">"/Users/apreston/PycharmProjects/guinea-malaria-maps/venv/lib/python3.8/site-packages/flask/_compat.py"</cite>,
      line <em class="line">39</em>,
      in <code class="function">reraise</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>import collections.abc as collections_abc</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def reraise(tp, value, tb=None):</pre>
<pre class="line before"><span class="ws">        </span>if value.__traceback__ is not tb:</pre>
<pre class="line before"><span class="ws">            </span>raise value.with_traceback(tb)</pre>
<pre class="line current"><span class="ws">        </span>raise value</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>implements_to_string = _identity</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span>else:</pre>
<pre class="line after"><span class="ws">    </span>iterkeys = lambda d: d.iterkeys()</pre></div>
</div>

<li><div class="frame" id="frame-4636296336">
  <h4>File <cite class="filename">"/Users/apreston/PycharmProjects/guinea-malaria-maps/venv/lib/python3.8/site-packages/flask/app.py"</cite>,
      line <em class="line">1950</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self.try_trigger_before_first_request_functions()</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(self, rv, from_error_handler=False):</pre></div>
</div>

<li><div class="frame" id="frame-4639182912">
  <h4>File <cite class="filename">"/Users/apreston/PycharmProjects/guinea-malaria-maps/venv/lib/python3.8/site-packages/flask/app.py"</cite>,
      line <em class="line">1936</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>getattr(rule, &quot;provide_automatic_options&quot;, False)</pre>
<pre class="line before"><span class="ws">            </span>and req.method == &quot;OPTIONS&quot;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line current"><span class="ws">        </span>return self.view_functions[rule.endpoint](**req.view_args)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self):</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-4639182960">
  <h4>File <cite class="filename">"/Users/apreston/PycharmProjects/guinea-malaria-maps/app.py"</cite>,
      line <em class="line">92</em>,
      in <code class="function">get_incidence</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>return makemap(columns[4])</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span>@app.route('/incidence.png', methods=['POST'])</pre>
<pre class="line before"><span class="ws"></span>def get_incidence():</pre>
<pre class="line before"><span class="ws">    </span>if request.method == 'POST':</pre>
<pre class="line current"><span class="ws">        </span>return makemap(columns[5])</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span>@app.route('/population.png', methods=['POST'])</pre>
<pre class="line after"><span class="ws"></span>def get_population():</pre>
<pre class="line after"><span class="ws">    </span>if request.method == 'POST':</pre>
<pre class="line after"><span class="ws">        </span>return makemap(columns[6])</pre></div>
</div>

<li><div class="frame" id="frame-4639183152">
  <h4>File <cite class="filename">"/Users/apreston/PycharmProjects/guinea-malaria-maps/app.py"</cite>,
      line <em class="line">228</em>,
      in <code class="function">makemap</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>output = io.BytesIO()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>response = make_response(output.getvalue())</pre>
<pre class="line before"><span class="ws">    </span>response.mimetype = 'image/png'</pre>
<pre class="line current"><span class="ws">    </span>fig.savefig(response, transparent=True, format='png')</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return response</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-4639183104">
  <h4>File <cite class="filename">"/Users/apreston/PycharmProjects/guinea-malaria-maps/venv/lib/python3.8/site-packages/matplotlib/figure.py"</cite>,
      line <em class="line">2311</em>,
      in <code class="function">savefig</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                </span>original_axes_colors.append((patch.get_facecolor(),</pre>
<pre class="line before"><span class="ws">                                             </span>patch.get_edgecolor()))</pre>
<pre class="line before"><span class="ws">                </span>patch.set_facecolor('none')</pre>
<pre class="line before"><span class="ws">                </span>patch.set_edgecolor('none')</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>self.canvas.print_figure(fname, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>if transparent:</pre>
<pre class="line after"><span class="ws">            </span>for ax, cc in zip(self.axes, original_axes_colors):</pre>
<pre class="line after"><span class="ws">                </span>ax.patch.set_facecolor(cc[0])</pre>
<pre class="line after"><span class="ws">                </span>ax.patch.set_edgecolor(cc[1])</pre></div>
</div>

<li><div class="frame" id="frame-4639183056">
  <h4>File <cite class="filename">"/Users/apreston/PycharmProjects/guinea-malaria-maps/venv/lib/python3.8/site-packages/matplotlib/backend_bases.py"</cite>,
      line <em class="line">2210</em>,
      in <code class="function">print_figure</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                </span>_bbox_inches_restore = (bbox_inches, restore_bbox)</pre>
<pre class="line before"><span class="ws">            </span>else:</pre>
<pre class="line before"><span class="ws">                </span>_bbox_inches_restore = None</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line current"><span class="ws">                </span>result = print_method(</pre>
<pre class="line after"><span class="ws">                    </span>filename,</pre>
<pre class="line after"><span class="ws">                    </span>dpi=dpi,</pre>
<pre class="line after"><span class="ws">                    </span>facecolor=facecolor,</pre>
<pre class="line after"><span class="ws">                    </span>edgecolor=edgecolor,</pre>
<pre class="line after"><span class="ws">                    </span>orientation=orientation,</pre></div>
</div>

<li><div class="frame" id="frame-4639183200">
  <h4>File <cite class="filename">"/Users/apreston/PycharmProjects/guinea-malaria-maps/venv/lib/python3.8/site-packages/matplotlib/backend_bases.py"</cite>,
      line <em class="line">1639</em>,
      in <code class="function">wrapper</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                        </span>+ arg + '&quot; which is no longer supported as of '</pre>
<pre class="line before"><span class="ws">                        </span>'%(since)s and will become an error '</pre>
<pre class="line before"><span class="ws">                        </span>'%(removal)s')</pre>
<pre class="line before"><span class="ws">            </span>kwargs.pop(arg)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>return func(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span>class FigureCanvasBase:</pre></div>
</div>

<li><div class="frame" id="frame-4639183392">
  <h4>File <cite class="filename">"/Users/apreston/PycharmProjects/guinea-malaria-maps/venv/lib/python3.8/site-packages/matplotlib/backends/backend_agg.py"</cite>,
      line <em class="line">510</em>,
      in <code class="function">print_png</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>If the 'pnginfo' key is present, it completely overrides</pre>
<pre class="line before"><span class="ws">            </span>*metadata*, including the default 'Software' key.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>FigureCanvasAgg.draw(self)</pre>
<pre class="line current"><span class="ws">        </span>mpl.image.imsave(</pre>
<pre class="line after"><span class="ws">            </span>filename_or_obj, self.buffer_rgba(), format=&quot;png&quot;, origin=&quot;upper&quot;,</pre>
<pre class="line after"><span class="ws">            </span>dpi=self.figure.dpi, metadata=metadata, pil_kwargs=pil_kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def print_to_buffer(self):</pre>
<pre class="line after"><span class="ws">        </span>FigureCanvasAgg.draw(self)</pre></div>
</div>

<li><div class="frame" id="frame-4639183488">
  <h4>File <cite class="filename">"/Users/apreston/PycharmProjects/guinea-malaria-maps/venv/lib/python3.8/site-packages/matplotlib/image.py"</cite>,
      line <em class="line">1605</em>,
      in <code class="function">imsave</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>background = PIL.Image.new(&quot;RGB&quot;, pil_shape, color)</pre>
<pre class="line before"><span class="ws">            </span>background.paste(image, image)</pre>
<pre class="line before"><span class="ws">            </span>image = background</pre>
<pre class="line before"><span class="ws">        </span>pil_kwargs.setdefault(&quot;format&quot;, format)</pre>
<pre class="line before"><span class="ws">        </span>pil_kwargs.setdefault(&quot;dpi&quot;, (dpi, dpi))</pre>
<pre class="line current"><span class="ws">        </span>image.save(fname, **pil_kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span>def pil_to_array(pilImage):</pre>
<pre class="line after"><span class="ws">    </span>&quot;&quot;&quot;</pre>
<pre class="line after"><span class="ws">    </span>Load a `PIL image`_ and return it as a numpy int array.</pre></div>
</div>

<li><div class="frame" id="frame-4639183536">
  <h4>File <cite class="filename">"/Users/apreston/PycharmProjects/guinea-malaria-maps/venv/lib/python3.8/site-packages/PIL/Image.py"</cite>,
      line <em class="line">2151</em>,
      in <code class="function">save</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                </span>fp = builtins.open(filename, &quot;r+b&quot;)</pre>
<pre class="line before"><span class="ws">            </span>else:</pre>
<pre class="line before"><span class="ws">                </span>fp = builtins.open(filename, &quot;w+b&quot;)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line current"><span class="ws">            </span>save_handler(self, fp, filename)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre>
<pre class="line after"><span class="ws">            </span># do what we can to clean up</pre>
<pre class="line after"><span class="ws">            </span>if open_fp:</pre>
<pre class="line after"><span class="ws">                </span>fp.close()</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-4639183008">
  <h4>File <cite class="filename">"/Users/apreston/PycharmProjects/guinea-malaria-maps/venv/lib/python3.8/site-packages/PIL/PngImagePlugin.py"</cite>,
      line <em class="line">1227</em>,
      in <code class="function">_save</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>raise OSError(f&quot;cannot write mode {mode} as PNG&quot;) from e</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>#</pre>
<pre class="line before"><span class="ws">    </span># write minimal PNG file</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">    </span>fp.write(_MAGIC)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>chunk(</pre>
<pre class="line after"><span class="ws">        </span>fp,</pre>
<pre class="line after"><span class="ws">        </span>b&quot;IHDR&quot;,</pre>
<pre class="line after"><span class="ws">        </span>o32(im.size[0]),  # 0: size</pre></div>
</div>
</ul>
  <blockquote>AttributeError: 'Response' object has no attribute 'write'</blockquote>
</div>

<div class="plain">
  <form action="/?__debugger__=yes&amp;cmd=paste" method="post">
    <p>
      <input type="hidden" name="language" value="pytb">
      This is the Copy/Paste friendly version of the traceback.  <span
      class="pastemessage">You can also paste this traceback into
      a <a href="https://gist.github.com/">gist</a>:
      <input type="submit" value="create paste"></span>
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &quot;/Users/apreston/PycharmProjects/guinea-malaria-maps/venv/lib/python3.8/site-packages/flask/app.py&quot;, line 2464, in __call__
    return self.wsgi_app(environ, start_response)
  File &quot;/Users/apreston/PycharmProjects/guinea-malaria-maps/venv/lib/python3.8/site-packages/flask/app.py&quot;, line 2450, in wsgi_app
    response = self.handle_exception(e)
  File &quot;/Users/apreston/PycharmProjects/guinea-malaria-maps/venv/lib/python3.8/site-packages/flask_cors/extension.py&quot;, line 165, in wrapped_function
    return cors_after_request(app.make_response(f(*args, **kwargs)))
  File &quot;/Users/apreston/PycharmProjects/guinea-malaria-maps/venv/lib/python3.8/site-packages/flask/app.py&quot;, line 1867, in handle_exception
    reraise(exc_type, exc_value, tb)
  File &quot;/Users/apreston/PycharmProjects/guinea-malaria-maps/venv/lib/python3.8/site-packages/flask/_compat.py&quot;, line 39, in reraise
    raise value
  File &quot;/Users/apreston/PycharmProjects/guinea-malaria-maps/venv/lib/python3.8/site-packages/flask/app.py&quot;, line 2447, in wsgi_app
    response = self.full_dispatch_request()
  File &quot;/Users/apreston/PycharmProjects/guinea-malaria-maps/venv/lib/python3.8/site-packages/flask/app.py&quot;, line 1952, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &quot;/Users/apreston/PycharmProjects/guinea-malaria-maps/venv/lib/python3.8/site-packages/flask_cors/extension.py&quot;, line 165, in wrapped_function
    return cors_after_request(app.make_response(f(*args, **kwargs)))
  File &quot;/Users/apreston/PycharmProjects/guinea-malaria-maps/venv/lib/python3.8/site-packages/flask/app.py&quot;, line 1821, in handle_user_exception
    reraise(exc_type, exc_value, tb)
  File &quot;/Users/apreston/PycharmProjects/guinea-malaria-maps/venv/lib/python3.8/site-packages/flask/_compat.py&quot;, line 39, in reraise
    raise value
  File &quot;/Users/apreston/PycharmProjects/guinea-malaria-maps/venv/lib/python3.8/site-packages/flask/app.py&quot;, line 1950, in full_dispatch_request
    rv = self.dispatch_request()
  File &quot;/Users/apreston/PycharmProjects/guinea-malaria-maps/venv/lib/python3.8/site-packages/flask/app.py&quot;, line 1936, in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
  File &quot;/Users/apreston/PycharmProjects/guinea-malaria-maps/app.py&quot;, line 92, in get_incidence
    return makemap(columns[5])
  File &quot;/Users/apreston/PycharmProjects/guinea-malaria-maps/app.py&quot;, line 228, in makemap
    fig.savefig(response, transparent=True, format='png')
  File &quot;/Users/apreston/PycharmProjects/guinea-malaria-maps/venv/lib/python3.8/site-packages/matplotlib/figure.py&quot;, line 2311, in savefig
    self.canvas.print_figure(fname, **kwargs)
  File &quot;/Users/apreston/PycharmProjects/guinea-malaria-maps/venv/lib/python3.8/site-packages/matplotlib/backend_bases.py&quot;, line 2210, in print_figure
    result = print_method(
  File &quot;/Users/apreston/PycharmProjects/guinea-malaria-maps/venv/lib/python3.8/site-packages/matplotlib/backend_bases.py&quot;, line 1639, in wrapper
    return func(*args, **kwargs)
  File &quot;/Users/apreston/PycharmProjects/guinea-malaria-maps/venv/lib/python3.8/site-packages/matplotlib/backends/backend_agg.py&quot;, line 510, in print_png
    mpl.image.imsave(
  File &quot;/Users/apreston/PycharmProjects/guinea-malaria-maps/venv/lib/python3.8/site-packages/matplotlib/image.py&quot;, line 1605, in imsave
    image.save(fname, **pil_kwargs)
  File &quot;/Users/apreston/PycharmProjects/guinea-malaria-maps/venv/lib/python3.8/site-packages/PIL/Image.py&quot;, line 2151, in save
    save_handler(self, fp, filename)
  File &quot;/Users/apreston/PycharmProjects/guinea-malaria-maps/venv/lib/python3.8/site-packages/PIL/PngImagePlugin.py&quot;, line 1227, in _save
    fp.write(_MAGIC)
AttributeError: 'Response' object has no attribute 'write'</textarea>
  </form>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/Users/apreston/PycharmProjects/guinea-malaria-maps/venv/lib/python3.8/site-packages/flask/app.py", line 2464, in __call__
    return self.wsgi_app(environ, start_response)
  File "/Users/apreston/PycharmProjects/guinea-malaria-maps/venv/lib/python3.8/site-packages/flask/app.py", line 2450, in wsgi_app
    response = self.handle_exception(e)
  File "/Users/apreston/PycharmProjects/guinea-malaria-maps/venv/lib/python3.8/site-packages/flask_cors/extension.py", line 165, in wrapped_function
    return cors_after_request(app.make_response(f(*args, **kwargs)))
  File "/Users/apreston/PycharmProjects/guinea-malaria-maps/venv/lib/python3.8/site-packages/flask/app.py", line 1867, in handle_exception
    reraise(exc_type, exc_value, tb)
  File "/Users/apreston/PycharmProjects/guinea-malaria-maps/venv/lib/python3.8/site-packages/flask/_compat.py", line 39, in reraise
    raise value
  File "/Users/apreston/PycharmProjects/guinea-malaria-maps/venv/lib/python3.8/site-packages/flask/app.py", line 2447, in wsgi_app
    response = self.full_dispatch_request()
  File "/Users/apreston/PycharmProjects/guinea-malaria-maps/venv/lib/python3.8/site-packages/flask/app.py", line 1952, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/Users/apreston/PycharmProjects/guinea-malaria-maps/venv/lib/python3.8/site-packages/flask_cors/extension.py", line 165, in wrapped_function
    return cors_after_request(app.make_response(f(*args, **kwargs)))
  File "/Users/apreston/PycharmProjects/guinea-malaria-maps/venv/lib/python3.8/site-packages/flask/app.py", line 1821, in handle_user_exception
    reraise(exc_type, exc_value, tb)
  File "/Users/apreston/PycharmProjects/guinea-malaria-maps/venv/lib/python3.8/site-packages/flask/_compat.py", line 39, in reraise
    raise value
  File "/Users/apreston/PycharmProjects/guinea-malaria-maps/venv/lib/python3.8/site-packages/flask/app.py", line 1950, in full_dispatch_request
    rv = self.dispatch_request()
  File "/Users/apreston/PycharmProjects/guinea-malaria-maps/venv/lib/python3.8/site-packages/flask/app.py", line 1936, in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
  File "/Users/apreston/PycharmProjects/guinea-malaria-maps/app.py", line 92, in get_incidence
    return makemap(columns[5])
  File "/Users/apreston/PycharmProjects/guinea-malaria-maps/app.py", line 228, in makemap
    fig.savefig(response, transparent=True, format='png')
  File "/Users/apreston/PycharmProjects/guinea-malaria-maps/venv/lib/python3.8/site-packages/matplotlib/figure.py", line 2311, in savefig
    self.canvas.print_figure(fname, **kwargs)
  File "/Users/apreston/PycharmProjects/guinea-malaria-maps/venv/lib/python3.8/site-packages/matplotlib/backend_bases.py", line 2210, in print_figure
    result = print_method(
  File "/Users/apreston/PycharmProjects/guinea-malaria-maps/venv/lib/python3.8/site-packages/matplotlib/backend_bases.py", line 1639, in wrapper
    return func(*args, **kwargs)
  File "/Users/apreston/PycharmProjects/guinea-malaria-maps/venv/lib/python3.8/site-packages/matplotlib/backends/backend_agg.py", line 510, in print_png
    mpl.image.imsave(
  File "/Users/apreston/PycharmProjects/guinea-malaria-maps/venv/lib/python3.8/site-packages/matplotlib/image.py", line 1605, in imsave
    image.save(fname, **pil_kwargs)
  File "/Users/apreston/PycharmProjects/guinea-malaria-maps/venv/lib/python3.8/site-packages/PIL/Image.py", line 2151, in save
    save_handler(self, fp, filename)
  File "/Users/apreston/PycharmProjects/guinea-malaria-maps/venv/lib/python3.8/site-packages/PIL/PngImagePlugin.py", line 1227, in _save
    fp.write(_MAGIC)
AttributeError: 'Response' object has no attribute 'write'

-->
